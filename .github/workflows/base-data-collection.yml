name: "Z-BASE Deploy Data Collection: Build data collection image"

on:
  workflow_call:
    inputs:
      build_branch:
        required: true
        type: string
      environment:
        required: true
        type: string
      sandbox:
        required: true
        type: string
    secrets:
      AWS_ASSUME_ROLE:
        required: true

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  data_collection_build_docker_image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: lambdas

    steps:
      - uses: actions/checkout@v5
        with:
          repository: 'NHSDigital/national-document-repository'
          ref: ${{ inputs.build_branch }}
          fetch-depth: '0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.sandbox }}-data-collection
          IMAGE_TAG: latest
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA -f ecs/data_collection/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA" >> $GITHUB_OUTPUT

      # Looks like the ECS does not check for image updates, as such we need to force a new task definition to run the new image
      # We will always use the "latest" image tag so we do not need to modify the task-definition
      - name: Download task definition
        id: download-task
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.sandbox }}-task-data-collection --query taskDefinition > task-definition.json
          echo "revision=$(cat task-definition.json | jq .revision)" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./lambdas/task-definition.json
          container-name: ${{ inputs.sandbox }}-container-data-collection
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ./lambdas/task-definition.json
          cluster: ${{ inputs.sandbox }}-data-collection
          wait-for-service-stability: true

      - name: De-register previous revision
        run: |
          aws ecs deregister-task-definition \
            --task-definition ${{ inputs.sandbox }}-task-data-collection:${{ steps.download-task.outputs.revision }}
