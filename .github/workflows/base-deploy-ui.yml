# .github/workflows/terraform-dev
name: "Z-BASE Deploy UI: Run a deploy job for the UI"

on:
  workflow_call:
    inputs:
      build_branch:
        description: "Branch with smoke tests."
        required: true
        type: "string"
      environment:
        description: "Environment to run against"
        required: true
        type: string
      sandbox:
        description: "Sandbox to push code to"
        required: true
        type: string
    secrets:
      AWS_ASSUME_ROLE:
        required: true

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  react_build_and_deploy_docker_image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: app

    steps:
      - uses: actions/checkout@v5
        with:
          repository: 'NHSDigital/national-document-repository'
          ref: ${{ inputs.build_branch }}
          fetch-depth: '0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: true
          
      - name: Get SSM parameters from SSM
        id: ssm-parameters
        run: | 
          doc_store_api_endpoint=$(aws ssm get-parameter --name "/ndr/${{ inputs.sandbox }}/api_endpoint" --with-decryption --query "Parameter.Value" --output text)
          echo "::add-mask::$doc_store_api_endpoint"
          echo "ENDPOINT_DOC_STORE_API=$doc_store_api_endpoint" >> $GITHUB_ENV
          container_port=$(aws ssm get-parameter --name "/ndr/${{ inputs.sandbox }}/container_port" --with-decryption --query "Parameter.Value" --output text)
          echo "::add-mask::$container_port"
          echo "CONTAINER_PORT=$container_port" >> $GITHUB_ENV

      - name: Get CloudFront domain name
        id: cloudfront-domain-name
        run: |
          cloudfront_domain_name=$(aws cloudfront list-distributions --query "DistributionList.Items[?starts_with(Origins.Items[0].DomainName, '${{ inputs.sandbox }}')].DomainName" --output text)
          echo "Cloudfront domain name found for environment: $cloudfront_domain_name"
          echo "CLOUDFRONT_DOMAIN_NAME=$cloudfront_domain_name" >> $GITHUB_ENV
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get Cognito Identity Pool ID
        id: cognito-identity-pool
        run: |
          identity_pool_id=$(aws cognito-identity list-identity-pools --max-results 50 \
            --query "IdentityPools[?starts_with(IdentityPoolName, '${{ inputs.sandbox }}')].IdentityPoolId" \
            --output text)
          echo "::add-mask::$identity_pool_id"
          echo "IDENTITY_PROVIDER_POOL_ID=$identity_pool_id" >> $GITHUB_OUTPUT

      - name: Get CloudWatch RUM App Monitor ID
        id: rum-app-monitor
        run: |
          app_monitor_id=$(aws rum list-app-monitors \
            --query "AppMonitorSummaries[?starts_with(Name, '${{ inputs.sandbox }}')].Id" \
            --output text)
          echo "::add-mask::$app_monitor_id"
          echo "MONITOR_ACCOUNT_ID=$app_monitor_id" >> $GITHUB_OUTPUT  

      - name: Configure React environment vars
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          OIDC_PROVIDER_ID: not provided yet
          IDENTITY_PROVIDER_POOL_ID: ${{ steps.cognito-identity-pool.outputs.IDENTITY_PROVIDER_POOL_ID }} 
          MONITOR_ACCOUNT_ID: ${{ steps.rum-app-monitor.outputs.MONITOR_ACCOUNT_ID }} 
          BUILD_ENV: ${{ inputs.environment }}
          IMAGE_VERSION: 'ndr-${{ inputs.sandbox }}-app:${{ github.sha }}'
        run: |
          ./react-environment-config.sh

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ndr-${{ inputs.sandbox }}-app
          IMAGE_TAG: latest
          IMAGE_TAG_SHA: ${{ github.sha }}
          CONTAINER_PORT: ${{ env.CONTAINER_PORT }}
        run: |
          docker build \
            --build-arg="CONTAINER_PORT=$CONTAINER_PORT" \
            --build-arg="CLOUDFRONT_DOMAIN_NAME=$CLOUDFRONT_DOMAIN_NAME" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA" >> $GITHUB_OUTPUT

      # Looks like the ECS does not check for image updates, as such we need to force a new task definition to run the new image
      # We will always use the "latest" image tag so we do not need to modify the task-definition
      - name: Download task definition
        id: download-task
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.sandbox }}-task-app-cluster --query taskDefinition > task-definition.json
          echo "revision=$(cat task-definition.json | jq .revision)" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./app/task-definition.json
          container-name: ${{ inputs.sandbox }}-container-app-cluster
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ./app/task-definition.json
          service: ${{ inputs.sandbox }}-ecs-cluster-service
          cluster: ${{ inputs.sandbox }}-app-cluster
          wait-for-service-stability: true

      - name: De-register previous revision
        run: |
          aws ecs deregister-task-definition \
            --task-definition ${{ inputs.sandbox }}-task-app-cluster:${{ steps.download-task.outputs.revision }}
